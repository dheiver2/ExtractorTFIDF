# -*- coding: utf-8 -*-
"""ExtractorTFIDF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BVWtDraXY1id-IntqDwessggZeQfngLf
"""

from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np
import pandas as pd

class ExtractorTFIDF:
    def __init__(self):
        self.vectorizer = TfidfVectorizer()
        self.feature_names = None

    def extract_tfidf_features(self, sentences, tipos=None, min_words=0):
        if tipos is None:
            tipos = [''] * len(sentences)  # Definindo todos como um tipo padrão se não especificado

        # Filtrar as frases com base no número mínimo de palavras e tipo de frase
        filtered_data = []
        for sentence, tipo in zip(sentences, tipos):
            if len(sentence.split()) >= min_words:
                filtered_data.append((sentence, tipo))

        # Separar frases filtradas por tipo
        grouped_sentences = {}
        for sentence, tipo in filtered_data:
            if tipo not in grouped_sentences:
                grouped_sentences[tipo] = []
            grouped_sentences[tipo].append(sentence)

        # Preparação para armazenar resultados
        all_data = []

        # Iterar sobre cada tipo de frase e extrair as características TF-IDF
        for tipo, sentences in grouped_sentences.items():
            tfidf_matrix = self.vectorizer.fit_transform(sentences)
            self.feature_names = self.vectorizer.get_feature_names_out()

            # Iterar sobre cada frase para encontrar as palavras mais importantes, calcular média e desvio padrão e contar palavras
            for i, sentence in enumerate(sentences):
                tfidf_scores = tfidf_matrix[i].toarray().flatten()
                important_words_indices = tfidf_scores.argsort()[-3:][::-1]  # Top 3 palavras mais importantes
                important_words = [self.feature_names[idx] for idx in important_words_indices]
                pontuacoes = [tfidf_scores[idx] for idx in important_words_indices]

                # Calculando média e desvio padrão das pontuações TF-IDF
                media_tfidf = np.mean(tfidf_scores)
                desvio_padrao_tfidf = np.std(tfidf_scores)

                # Contando palavras na frase
                num_palavras = len(sentence.split())

                # Adicionando informações no formato de dicionário
                all_data.append({
                    'Tipo': tipo,
                    'Frase': sentence,
                    'Palavras_importantes': important_words,
                    'Pontuacoes_TFIDF': pontuacoes,
                    'Media_TFIDF': media_tfidf,
                    'Desvio_Padrao_TFIDF': desvio_padrao_tfidf,
                    'Contagem_Palavras': num_palavras
                })

        # Retornando um DataFrame do Pandas com os dados coletados
        df = pd.DataFrame(all_data)
        return df

    def contar_frequencia_palavras_importantes(self, df, tipo=None):
        frequencia = {}
        if tipo is not None:
            df = df[df['Tipo'] == tipo]

        for palavras_lista in df['Palavras_importantes']:
            for palavra in palavras_lista:
                if palavra in frequencia:
                    frequencia[palavra] += 1
                else:
                    frequencia[palavra] = 1

        df_freq = pd.DataFrame(list(frequencia.items()), columns=['Palavra', 'Frequencia'])
        df_freq = df_freq.sort_values(by='Frequencia', ascending=False).reset_index(drop=True)

        # Adicionando a coluna Tipo ao DataFrame de frequência
        df_freq['Tipo'] = tipo if tipo is not None else 'Todos'

        return df_freq

# Exemplo de uso da classe com entrada do usuário
from ExtractorTFIDF import ExtractorTFIDF  # Importe sua classe ExtractorTFIDF

if __name__ == "__main__":
    frases = [
        "O céu está azul hoje.",
        "A primavera chegou mais cedo este ano.",
        "Gosto de caminhar ao pôr do sol.",
        "A vida é uma jornada cheia de surpresas.",
        "A ciência avança a passos largos.",
        "A música é a linguagem universal."
    ]

    tipos = [
        "Meteorologia",
        "Meteorologia",
        "Meteorologia",
        "Filosofia",
        "Filosofia",
        "Filosofia"
    ]

    # Definindo um valor padrão fixo para min_words
    min_words = 5

    extractor = ExtractorTFIDF()
    df_resultado = extractor.extract_tfidf_features(frases, tipos, min_words)

    # Exibir o DataFrame final com as palavras importantes e suas pontuações TF-IDF
    print("DataFrame com as palavras importantes e suas pontuações TF-IDF:")
    print(df_resultado)

    # Aqui você pode continuar com o processamento do DataFrame conforme necessário


df_final
